// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson85f0d656DecodeGameserverInternalServicesModel(in *jlexer.Lexer, out *SendMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PlayerID":
			if in.IsNull() {
				in.Skip()
			} else {
				copy(out.PlayerID[:], in.Bytes())
			}
		case "Message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson85f0d656EncodeGameserverInternalServicesModel(out *jwriter.Writer, in SendMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PlayerID\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.PlayerID[:])
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson85f0d656EncodeGameserverInternalServicesModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson85f0d656EncodeGameserverInternalServicesModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson85f0d656DecodeGameserverInternalServicesModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson85f0d656DecodeGameserverInternalServicesModel(l, v)
}
func easyjson85f0d656DecodeGameserverInternalServicesModel1(in *jlexer.Lexer, out *InMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "gameid":
			out.GameID = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Data = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					(out.Data)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson85f0d656EncodeGameserverInternalServicesModel1(out *jwriter.Writer, in InMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"gameid\":"
		out.RawString(prefix)
		out.String(string(in.GameID))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Data {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				if m, ok := v4Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v4Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v4Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson85f0d656EncodeGameserverInternalServicesModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson85f0d656EncodeGameserverInternalServicesModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson85f0d656DecodeGameserverInternalServicesModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson85f0d656DecodeGameserverInternalServicesModel1(l, v)
}
func easyjson85f0d656DecodeGameserverInternalServicesModel2(in *jlexer.Lexer, out *GameMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = string(in.String())
		case "GameID":
			out.GameID = string(in.String())
		case "PlayerID":
			if in.IsNull() {
				in.Skip()
			} else {
				copy(out.PlayerID[:], in.Bytes())
			}
		case "Data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Data = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 interface{}
					if m, ok := v6.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v6.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v6 = in.Interface()
					}
					(out.Data)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson85f0d656EncodeGameserverInternalServicesModel2(out *jwriter.Writer, in GameMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"GameID\":"
		out.RawString(prefix)
		out.String(string(in.GameID))
	}
	{
		const prefix string = ",\"PlayerID\":"
		out.RawString(prefix)
		out.Base64Bytes(in.PlayerID[:])
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Data {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				if m, ok := v8Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v8Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v8Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson85f0d656EncodeGameserverInternalServicesModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson85f0d656EncodeGameserverInternalServicesModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson85f0d656DecodeGameserverInternalServicesModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson85f0d656DecodeGameserverInternalServicesModel2(l, v)
}
func easyjson85f0d656DecodeGameserverInternalServicesModel3(in *jlexer.Lexer, out *GameInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PlayerCount":
			out.PlayerCount = int(in.Int())
		case "ContentURL":
			out.ContentURL = string(in.String())
		case "TurnTimeout":
			out.TurnTimeout = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson85f0d656EncodeGameserverInternalServicesModel3(out *jwriter.Writer, in GameInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PlayerCount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PlayerCount))
	}
	{
		const prefix string = ",\"ContentURL\":"
		out.RawString(prefix)
		out.String(string(in.ContentURL))
	}
	{
		const prefix string = ",\"TurnTimeout\":"
		out.RawString(prefix)
		out.Int(int(in.TurnTimeout))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson85f0d656EncodeGameserverInternalServicesModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson85f0d656EncodeGameserverInternalServicesModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson85f0d656DecodeGameserverInternalServicesModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson85f0d656DecodeGameserverInternalServicesModel3(l, v)
}
