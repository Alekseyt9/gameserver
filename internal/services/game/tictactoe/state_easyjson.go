// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package game

import (
	json "encoding/json"
	uuid "github.com/google/uuid"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBd887cf1DecodeGameserverInternalServicesGameTictactoe(in *jlexer.Lexer, out *TTTState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "field":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v1 := 0
				for !in.IsDelim(']') {
					if v1 < 15 {
						if in.IsNull() {
							in.Skip()
						} else {
							copy((out.Field)[v1][:], in.Bytes())
						}
						v1++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]uuid.UUID, 0, 4)
					} else {
						out.Players = []uuid.UUID{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v3 uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v3).UnmarshalText(data))
					}
					out.Players = append(out.Players, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "state":
			out.State = string(in.String())
		case "winner":
			out.Winner = int(in.Int())
		case "turn":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Turn).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGameserverInternalServicesGameTictactoe(out *jwriter.Writer, in TTTState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"field\":"
		out.RawString(prefix[1:])
		out.RawByte('[')
		for v4 := range in.Field {
			if v4 > 0 {
				out.RawByte(',')
			}
			out.Base64Bytes((in.Field)[v4][:])
		}
		out.RawByte(']')
	}
	{
		const prefix string = ",\"players\":"
		out.RawString(prefix)
		if in.Players == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Players {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.RawText((v7).MarshalText())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"winner\":"
		out.RawString(prefix)
		out.Int(int(in.Winner))
	}
	{
		const prefix string = ",\"turn\":"
		out.RawString(prefix)
		out.RawText((in.Turn).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TTTState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGameserverInternalServicesGameTictactoe(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TTTState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGameserverInternalServicesGameTictactoe(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TTTState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGameserverInternalServicesGameTictactoe(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TTTState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGameserverInternalServicesGameTictactoe(l, v)
}
func easyjsonBd887cf1DecodeGameserverInternalServicesGameTictactoe1(in *jlexer.Lexer, out *TTTSendState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "field":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v8 := 0
				for !in.IsDelim(']') {
					if v8 < 15 {
						if in.IsNull() {
							in.Skip()
						} else {
							copy((out.Field)[v8][:], in.Bytes())
						}
						v8++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]uuid.UUID, 0, 4)
					} else {
						out.Players = []uuid.UUID{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v10 uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v10).UnmarshalText(data))
					}
					out.Players = append(out.Players, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "turn":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Turn).UnmarshalText(data))
			}
		case "you":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.You).UnmarshalText(data))
			}
		case "state":
			out.State = string(in.String())
		case "winner":
			out.Winner = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd887cf1EncodeGameserverInternalServicesGameTictactoe1(out *jwriter.Writer, in TTTSendState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"field\":"
		out.RawString(prefix[1:])
		out.RawByte('[')
		for v11 := range in.Field {
			if v11 > 0 {
				out.RawByte(',')
			}
			out.Base64Bytes((in.Field)[v11][:])
		}
		out.RawByte(']')
	}
	{
		const prefix string = ",\"players\":"
		out.RawString(prefix)
		if in.Players == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Players {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.RawText((v14).MarshalText())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"turn\":"
		out.RawString(prefix)
		out.RawText((in.Turn).MarshalText())
	}
	{
		const prefix string = ",\"you\":"
		out.RawString(prefix)
		out.RawText((in.You).MarshalText())
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"winner\":"
		out.RawString(prefix)
		out.Int(int(in.Winner))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TTTSendState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd887cf1EncodeGameserverInternalServicesGameTictactoe1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TTTSendState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd887cf1EncodeGameserverInternalServicesGameTictactoe1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TTTSendState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd887cf1DecodeGameserverInternalServicesGameTictactoe1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TTTSendState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd887cf1DecodeGameserverInternalServicesGameTictactoe1(l, v)
}
